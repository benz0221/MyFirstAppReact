{"version":3,"sources":["Components/Top-Header.js","App.js","serviceWorker.js","index.js"],"names":["TopHeader","today","Date","date","getDate","getMonth","getFullYear","state","currentDate","className","this","Component","Todo","todo","index","removeTodo","text","onClick","TodoForm","addTodo","React","useState","value","setValue","onSubmit","e","preventDefault","type","maxLength","placeholder","onChange","target","App","todos","setTodos","newTodos","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAuBeA,E,kDApBX,aAAe,IAAD,sBAEV,eAEA,IAAIC,EAAQ,IAAIC,KAEhBC,EAAOF,EAAMG,UAAY,KAAOH,EAAMI,WAAa,GAAK,IAAMJ,EAAMK,cAN1D,OAQV,EAAKC,MAAQ,CAACC,YAAaL,GARjB,E,qDAYV,OACI,yBAAKM,UAAY,UACb,4CAAmBC,KAAKH,MAAMC,YAA9B,U,GAfQG,aCIxB,SAASC,EAAT,GAA2C,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,WAC1B,OACE,yBAAKN,UAAU,QAEZI,EAAKG,KACN,4BAAQP,UAAU,aAAaQ,QAAS,kBAAMF,EAAWD,KAAzD,MAMN,SAASI,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,IAAMC,SAAS,IADZ,mBACtBC,EADsB,KACfC,EADe,KAU7B,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLH,EAAQG,GACRC,EAAS,OAMP,2BACEI,KAAK,OACLlB,UAAU,QACVmB,UAAU,KACVC,YAAc,YACdP,MAAOA,EACPQ,SAAU,SAAAL,GAAC,OAAIF,EAASE,EAAEM,OAAOT,UAGnC,4BAAQb,UAAU,UAAUkB,KAAK,UAAjC,aAyCSK,MApCf,WAAgB,IAAD,EACaZ,IAAMC,SAAS,CACvC,CAACL,KAAM,uBACP,CAACA,KAAM,sBACP,CAACA,KAAM,4BACP,CAACA,KAAM,kCALI,mBACNiB,EADM,KACCC,EADD,KAYPnB,EAAa,SAAAD,GACjB,IAAMqB,EAAQ,YAAOF,GACrBE,EAASC,OAAOtB,EAAO,GACvBoB,EAASC,IAGX,OACE,yBAAK1B,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACZwB,EAAMI,KAAI,SAACxB,EAAMC,GAAP,OACT,kBAACF,EAAD,CACE0B,IAAKxB,EACLA,MAAOA,EACPD,KAAMA,EACNE,WAAYA,OAGd,kBAACG,EAAD,CAAUC,QAtBJ,SAAAH,GACd,IAAMmB,EAAQ,sBAAOF,GAAP,CAAc,CAAEjB,UAC9BkB,EAASC,SC1COI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6797dd82.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TopHeader extends Component {\r\n    constructor() { \r\n        \r\n        super() \r\n \r\n        var today = new Date(),\r\n    \r\n        date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\r\n              \r\n        this.state = {currentDate: date}\r\n    \r\n      }\r\n    render() {\r\n        return (\r\n            <div className = \"Header\">\r\n                <h1> TO-DO-LIST ({ this.state.currentDate})</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopHeader\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { DragDropContext, Droppable , Draggable} from \"react-beautiful-dnd\";\nimport TopHeader from './Components/Top-Header';\n\n\nfunction Todo({ todo, index,removeTodo }) {\n  return (\n    <div className=\"todo\">\n         \n      {todo.text}\n      <button className=\"removeTask\" onClick={() => removeTodo(index)}>x</button>\n      \n    </div>\n  );\n}\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = React.useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n    \n      <input\n        type=\"text\"\n        className=\"input\"\n        maxLength=\"50\"\n        placeholder = \"Type here\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n\n      <button className=\"addTask\" type=\"submit\">Add Task</button>      \n    </form>\n  );\n}\n\nfunction App() {\n  const [todos, setTodos] = React.useState([\n    {text: \"Drop Kids at School\"},\n    {text: \"Attend Daily Scrum\"},\n    {text: \"Have Lunch with a Friend\"},\n    {text: \"Attend New Tech Presentation\"}\n  ]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n  const removeTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n        <TopHeader></TopHeader>\n        <div className=\"todo-list\">\n          {todos.map((todo, index) => (\n            <Todo\n              key={index}\n              index={index}\n              todo={todo}\n              removeTodo={removeTodo}\n            />\n          ))}\n            <TodoForm addTodo={addTodo} />\n        </div>\n      </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}